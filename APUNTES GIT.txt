---------------------------------------------------- APUNTES GIT -----------------------------------------------------------------------
ANDREA RAMÍREZ OSUNA

COMANDOS CONSOLA:

git init : Se ejecuta una sola vez cuando queremos que GIT comience a hacer un seguimiento
de nuestro proyecto.
Con esto GIT crea dos areas de trabajo:

	-staging area: donde se almacenan los archivos de manera TEMPORAL. 
	-repositorio local: se almacenan las copias (versiones) de nuestros archivos. 
	De aquí es de donde podremos "rescatar" las versiones de los archivos si así lo deseamos.
Hay un primer area exrtra: el directorio de trabajo, que son nuestros archivos originales.

git add : para indicarle a git de qué archivos queremos que haga un seguimiento. Hacer
un seguimiento es transladar los archivos desde el directorio de trabajo hasta el 
staging area.
			"git add . " -> Agrega todos los archivos al staging area (git les hará seguimiento)
			"git add nombreArchivo" -> Agrega al staging area SOLO ese archivo

git commit -m "comentario aclaratorio": llevamos el archivo desde el staging area al rep. local, es decir, creamos la versión de nuestro archivo qe podremos recuperar después si así lo deseamos.
OJO!!!!!!!! Si hacemos un commit desde la consola, ese commit solo ocurre en el rep. local. Por lo tanto, para actualizar nuestra copia en el repositorio remoto de GitHub, tendremos que hacer un git push.

git status -s: indica los archivos y directorios que tenemos ahora mismo en la carpeta del proyecto
donde está la consola metida. Sin embarrgo, cuando aparecen signod "??" al lado de estos significa que, aunque git sabe que estan ahi, no les esta haciendo ningun seguimiento (es decir, no puede crear copias
de seg).
En cambio, si hacemos un "git add "archivo" " ese archivo lo estaremos comenzando a seguir (es decir, lo mandamos al staging area). A partir de ese momento, en lugar d eun "?" aparecera un "A" verde.
Si luego hacemos un git commit a ese mismo archivo, lo llevaremos al repositorio local. Por lo tanto, al hacer el git status -s de nuevo, ese archivo NO APARECERÁ.
Es decir, el git status solo nos informa de los archivos que no estan aun en el rep local.

Si hiciéramos algún cambio en el archivo del repositorio (modificarlo de cualquier forma), al usar
git status -s, este volvería a aparecernos. Porque nosotros llevamos al repositorio, en su momento, una "versión" de nuestro archivo. Ahora, al haberlo modificado, hemos creado una versión "actualizada" de la cual aún no tenemos copia de seguridad. Por eso git nos informa.
Por lo tanto, esa "nueva versión", en caso de que queramos hacerle una copia de seguridad, deberíamos primero llevrla a la staging area (hacerle un add) y después hacerle un commit para llevarla al rep. local.

Para ello podemos usar el siguiente comando:
git commit -am "comentario aclaratorio": Es un add de todos los archivos y un commit a la vez (tambien puedo hacer el add y el commit por separado, es tan solo un atajillo).

git log --oneline : este comando me va a sacar por consola todas las "copias de seguridad" que haya hecho de cada archivo (es decir, todos los commits).


git reset --hard código : este comando se usa cuando queremos qque nuestro archivo vuelva a ser como alguna de las versiones anteriores que tenemos guardadas en el rep local (las que hemos ido guardadno usando primero add y luego commit). El código se refiere a la cifra que aparece delante de cada version cuando usamos el comando git log --oneline. Usaremos el codigo de la version a la que queramos volver.


git push: este comando sirve para subir (es decir, actualziar) los cambios que hemos hecho en local (en nuestro rep. local del pc) a remoto (es decir, a la nube de GitHub).
OJO!!! Si lo que queremos es actualizar alguna tag que hemos creado en el rep. local, debemos usar "git push --tags".

git pull: este comando sirve para subir los cambios que hayamos hecho en la copia de seg que tenemos en la nube de GitHub (ya qu podemos editar directamente en la pagina de github) a el rep. local (la copia del proyecto que tenemos en nuestro pc).


git tag nombreDeLaVersion -m "descripcion de la versión" : Este comando sirve para cuando pensamos que nuestro proyecto ha llegado a un punto en el que consideramos que está lo suficientemente completo como para crear una versión de este. Esto no significa que hayamos acabado el proyecto, sino que, por ejemplo, hemos acabado la fase alfa. Entonces creamos una tag diciendo "git tag 02-10-2020vAlpha -m "Versión alpha del proyecto" ". Y así, aunque sigas avanzando y añadiendo cosas al proyecto, cualquier persona en cualquier momento si quiere podrá descargar el proyecto en un zip pero tal y como estaba en el momento en el que se creó la tag. Es como guardar una copia de seg. del proyecto pero tal y como estaba en un instante concreto. Cuando creemos más tags, si vamos a la pestañita "tags" de nuestro proy. en github, podremos acceder a cómo estaba nuestro proyecto en cada versión (cada tag), independientemente de cómo esté ahora mismo.Esto sirve para, por ejemplo, si la versión en la que estamos ahora no funciona bien, poder volver a una versión anterior sin ningún tipo de problema.
OJO! Al hacer el git tag desde consola esta tag solo se crea en el rep. local. Para actualizarla en github tendremos que usar git push --tags.


git clone url : Este comando sirve para, directamente, clonar un proyecto de un repositorio remoto de github a tu repositorio local. Es decir, si por ejemplo ocurre un desastre y se te borra el proyecto completo de tu pc (rep. local), puedes ir a github y coger la url del proyecto y usar este comando. Automáticamente el proyecto volverá a estar en tu pc.

---------------- GITHUB
¿Qué es?  -> Es como una especie de nube a la que puedes subir esas "copias de seguridad" que haces de cada versión. En vezz de guardar esas copias en tu propio disco duro (que puede por ejemplo romperse), pues las guardas en GitHub y sabes que ahí están a salvo.
